import logging
import sqlite3
import datetime
from telegram import __version__ as TG_VER
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Update,
    LabeledPrice,
    KeyboardButton,
    ReplyKeyboardMarkup
)
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
    PreCheckoutQueryHandler,
    JobQueue
)
from telegram.constants import ParseMode

if TG_VER.split(".")[0] < "20":
    raise RuntimeError(
        f"–≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –Ω–µ —Å–æ–≤–º–µ—Å—Ç–∏–º —Å –≤–∞—à–µ–π —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–µ–π PTB {TG_VER}. –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–µ—Ä—Å–∏–∏ 20.x –ø–æ—Å–µ—Ç–∏—Ç–µ "
        f"https://docs.python-telegram-bot.org/en/v20.x/examples.html"
    )

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

PAYMASTER_TOKEN = "***"
CURRENCY = "RUB"
PRICE = 79900  # 799.00 RUB

def create_tables():
    conn = sqlite3.connect("colleagues.db")
    c = conn.cursor()
    
    c.execute("""CREATE TABLE IF NOT EXISTS users
                 (user_id INTEGER PRIMARY KEY, 
                  name TEXT, 
                  profession TEXT, 
                  skills TEXT, 
                  bio TEXT,
                  photo_id TEXT,
                  username TEXT,
                  is_premium INTEGER DEFAULT 0,
                  subscription_end TEXT,
                  social_link TEXT)""")
    
    c.execute("""CREATE TABLE IF NOT EXISTS works
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  user_id INTEGER,
                  work_title TEXT,
                  work_description TEXT)""")
    
    c.execute("""CREATE TABLE IF NOT EXISTS connections
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  from_user INTEGER,
                  to_user INTEGER,
                  status TEXT)""")

    conn.commit()
    conn.close()

def get_user(user_id):
    conn = sqlite3.connect("colleagues.db")
    c = conn.cursor()
    c.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
    row = c.fetchone()
    conn.close()
    if row:
        return {
            "user_id": row[0],
            "name": row[1],
            "profession": row[2],
            "skills": row[3],
            "bio": row[4],
            "photo_id": row[5],
            "username": row[6],
            "is_premium": bool(row[7]),
            "subscription_end": row[8],
            "social_link": row[9]
        }
    return None

def update_user(user_id, name, profession, skills, bio, photo_id=None, username=None, social_link=None):
    conn = sqlite3.connect("colleagues.db")
    c = conn.cursor()
    c.execute("SELECT is_premium, subscription_end FROM users WHERE user_id=?", (user_id,))
    existing = c.fetchone()
    is_premium = existing[0] if existing else 0
    sub_end = existing[1] if existing else None
    
    c.execute(
        """INSERT OR REPLACE INTO users 
                 (user_id, name, profession, skills, bio, photo_id, username, social_link, is_premium, subscription_end) 
                 VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)""",
        (user_id, name, profession, skills, bio, photo_id, username, social_link, is_premium, sub_end),
    )
    conn.commit()
    conn.close()

def get_connections(user_id):
    conn = sqlite3.connect("colleagues.db")
    c = conn.cursor()
    c.execute("""
        SELECT users.user_id, users.name, users.profession, users.username 
        FROM connections
        JOIN users ON users.user_id = CASE 
            WHEN connections.from_user = ? THEN connections.to_user 
            ELSE connections.from_user 
        END
        WHERE (connections.from_user = ? OR connections.to_user = ?)
        AND connections.status = 'accepted'
    """, (user_id, user_id, user_id))
    connections = [{
        'user_id': row[0],
        'name': row[1],
        'profession': row[2],
        'username': row[3]
    } for row in c.fetchall()]
    conn.close()
    return connections

def get_user_subscription(user_id):
    conn = sqlite3.connect("colleagues.db")
    c = conn.cursor()
    c.execute("SELECT is_premium, subscription_end FROM users WHERE user_id=?", (user_id,))
    row = c.fetchone()
    conn.close()
    
    if row and row[0]:
        end_date = datetime.datetime.fromisoformat(row[1])
        if datetime.datetime.now() < end_date:
            return True
        update_premium_status(user_id, False)
    return False

def update_premium_status(user_id, is_premium):
    conn = sqlite3.connect("colleagues.db")
    c = conn.cursor()
    if is_premium:
        end_date = datetime.datetime.now() + datetime.timedelta(days=30)
        c.execute("UPDATE users SET is_premium=1, subscription_end=? WHERE user_id=?", 
                 (end_date.isoformat(), user_id))
    else:
        c.execute("UPDATE users SET is_premium=0, subscription_end=NULL WHERE user_id=?", (user_id,))
    conn.commit()
    conn.close()

def get_user_works(user_id):
    conn = sqlite3.connect("colleagues.db")
    c = conn.cursor()
    c.execute("SELECT work_title, work_description FROM works WHERE user_id=?", (user_id,))
    works = c.fetchall()
    conn.close()
    return [{"title": w[0], "description": w[1]} for w in works]

def check_subscriptions(context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫")
    conn = sqlite3.connect("colleagues.db")
    c = conn.cursor()
    c.execute("SELECT user_id FROM users WHERE is_premium=1")
    premium_users = [row[0] for row in c.fetchall()]
    
    for user_id in premium_users:
        if not get_user_subscription(user_id):
            logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    conn.close()

EDITING, EDIT_PHOTO, EDIT_NAME, EDIT_PROFESSION, EDIT_SKILLS, EDIT_BIO, EDIT_SOCIAL = range(7)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    keyboard = [
        [KeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("üîç –ü–æ–∏—Å–∫ —Å–≤—è–∑–µ–π")],
        [KeyboardButton("ü§ù –ú–æ–∏ —Å–≤—è–∑–∏"), KeyboardButton("üíé –ü—Ä–µ–º–∏—É–º")],
        [KeyboardButton("üÜò –ü–æ–º–æ—â—å")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ")
    
    text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Å–µ—Ç—å Colleagues Bot!\n\n"
        "üöÄ –ù–∞—á–Ω–∏ —Å —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∏ –Ω–∞—Ö–æ–¥–∏ –Ω—É–∂–Ω—ã–µ —Å–≤—è–∑–∏!\n"
        "üëá –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:"
    )
    
    await update.message.reply_text(text, reply_markup=reply_markup)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üìö *–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∫–æ–º–∞–Ω–¥:*\n\n"
        "üë§ _–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å_ - –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è\n"
        "üîç _–ü–æ–∏—Å–∫ —Å–≤—è–∑–µ–π_ - –ù–∞–π—Ç–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤\n"
        "ü§ù _–ú–æ–∏ —Å–≤—è–∑–∏_ - –í–∞—à–∞ —Å–µ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤\n"
        "üíé _–ü—Ä–µ–º–∏—É–º_ - –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏\n"
        "üÜò _–ü–æ–º–æ—â—å_ - –≠—Ç–æ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ –º–µ–Ω—é\n\n"
        "üí° *–°–æ–≤–µ—Ç—ã:*\n"
        "- –ó–∞–ø–æ–ª–Ω—è–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ\n"
        "- –û–±–Ω–æ–≤–ª—è–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ä–∞–∑ –≤ –º–µ—Å—è—Ü\n"
        "- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–µ–º–∏—É–º –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π\n"
        "- –°–≤—è–∑—ã–≤–∞–π—Ç–µ—Å—å —Ç–æ–ª—å–∫–æ —Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏"
    )
    await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    if query:
        await query.answer()
        message = query.message
    else:
        message = update.message

    user = get_user(update.effective_user.id)
    
    keyboard = [
        [
            InlineKeyboardButton("üì∑ –§–æ—Ç–æ", callback_data="edit_photo"),
            InlineKeyboardButton("üë§ –ò–º—è", callback_data="edit_name")
        ],
        [
            InlineKeyboardButton("üíº –ü—Ä–æ—Ñ–µ—Å—Å–∏—è", callback_data="edit_profession"),
            InlineKeyboardButton("üõ† –ù–∞–≤—ã–∫–∏", callback_data="edit_skills")
        ],
        [
            InlineKeyboardButton("üìñ –û–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_bio"),
            InlineKeyboardButton("üåê –°–æ—Ü—Å–µ—Ç—å", callback_data="edit_social")
        ],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")]
    ]
    
    text = "‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è:*\n–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
    
    if user:
        await message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
        return EDITING
    else:
        await message.reply_text("üìù –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
        return EDIT_NAME

async def edit_field(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    choice = query.data
    
    if choice == "edit_photo":
        await query.edit_message_text("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è (–∏–ª–∏ /skip)")
        return EDIT_PHOTO
    elif choice == "edit_name":
        await query.edit_message_text("üë§ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")
        return EDIT_NAME
    elif choice == "edit_profession":
        await query.edit_message_text("üíº –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é:")
        return EDIT_PROFESSION
    elif choice == "edit_skills":
        await query.edit_message_text("üõ† –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
        return EDIT_SKILLS
    elif choice == "edit_bio":
        await query.edit_message_text("üìñ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
        return EDIT_BIO
    elif choice == "edit_social":
        await query.edit_message_text("üåê –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ—Ü—Å–µ—Ç—å:")
        return EDIT_SOCIAL
    elif choice == "cancel_edit":
        await query.edit_message_text("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return ConversationHandler.END
    else:
        await query.edit_message_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return EDITING

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = get_user(update.effective_user.id)
    photo_file = update.message.photo[-1].file_id
    update_user(
        user_id=update.effective_user.id,
        name=user['name'],
        profession=user['profession'],
        skills=user['skills'],
        bio=user['bio'],
        photo_id=photo_file,
        social_link=user['social_link']
    )
    await update.message.reply_text("‚úÖ –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    return ConversationHandler.END

async def skip_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("‚úÖ –§–æ—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    return ConversationHandler.END

async def handle_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = get_user(update.effective_user.id)
    new_name = update.message.text
    update_user(
        user_id=update.effective_user.id,
        name=new_name,
        profession=user['profession'],
        skills=user['skills'],
        bio=user['bio'],
        photo_id=user['photo_id'],
        social_link=user['social_link']
    )
    await update.message.reply_text("‚úÖ –ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    return ConversationHandler.END

async def handle_profession(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = get_user(update.effective_user.id)
    new_profession = update.message.text
    update_user(
        user_id=update.effective_user.id,
        name=user['name'],
        profession=new_profession,
        skills=user['skills'],
        bio=user['bio'],
        photo_id=user['photo_id'],
        social_link=user['social_link']
    )
    await update.message.reply_text("‚úÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    return ConversationHandler.END

async def handle_skills(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = get_user(update.effective_user.id)
    new_skills = update.message.text
    update_user(
        user_id=update.effective_user.id,
        name=user['name'],
        profession=user['profession'],
        skills=new_skills,
        bio=user['bio'],
        photo_id=user['photo_id'],
        social_link=user['social_link']
    )
    await update.message.reply_text("‚úÖ –ù–∞–≤—ã–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
    return ConversationHandler.END

async def handle_bio(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = get_user(update.effective_user.id)
    new_bio = update.message.text
    update_user(
        user_id=update.effective_user.id,
        name=user['name'],
        profession=user['profession'],
        skills=user['skills'],
        bio=new_bio,
        photo_id=user['photo_id'],
        social_link=user['social_link']
    )
    await update.message.reply_text("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    return ConversationHandler.END

async def handle_social(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = get_user(update.effective_user.id)
    social_link = update.message.text
    if social_link.startswith(("http://", "https://")):
        update_user(
            user_id=update.effective_user.id,
            name=user['name'],
            profession=user['profession'],
            skills=user['skills'],
            bio=user['bio'],
            photo_id=user['photo_id'],
            social_link=social_link
        )
        await update.message.reply_text("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ—Ü—Å–µ—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    else:
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return EDIT_SOCIAL
    return ConversationHandler.END

async def skip_social(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ—Ü—Å–µ—Ç—å –æ—Å—Ç–∞–ª–∞—Å—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    return ConversationHandler.END

async def myprofile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = get_user(user_id)
    
    if not user:
        await update.message.reply_text("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è")
        return
    
    premium_badge = " üíé" if user['is_premium'] else ""
    profile_text = (
        f"üë§ *–ò–º—è:* {user['name']}{premium_badge}\n\n"
        f"üíº *–ü—Ä–æ—Ñ–µ—Å—Å–∏—è:* {user['profession']}\n\n"
        f"üõ†Ô∏è *–ù–∞–≤—ã–∫–∏:* {user['skills']}\n\n"
        f"üìñ *–û —Å–µ–±–µ:* {user['bio']}"
    )
    
    if user['social_link']:
        profile_text += f"\n\nüåê *–°–æ—Ü—Å–µ—Ç—å:* [–°—Å—ã–ª–∫–∞]({user['social_link']})"
    
    if user['is_premium']:
        works = get_user_works(user_id)
        if works:
            profile_text += "\n\nüé® *–ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç:*"
            for i, work in enumerate(works, 1):
                profile_text += f"\n{i}. *{work['title']}*: {work['description']}"

    keyboard = [[InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="update_profile")]]
    
    try:
        if user['photo_id']:
            await update.message.reply_photo(
                photo=user['photo_id'],
                caption=profile_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await update.message.reply_text(
                profile_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è")

async def connections(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    connections = get_connections(user_id)
    
    if not connections:
        await update.message.reply_text("ü§∑ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–≤—è–∑–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫!")
        return
    
    keyboard = []
    for conn in connections:
        contact_button = InlineKeyboardButton(
            "üì® –ù–∞–ø–∏—Å–∞—Ç—å",
            url=f"https://t.me/{conn['username']}" if conn['username'] 
            else f"tg://user?id={conn['user_id']}"
        )
        
        buttons = [
            InlineKeyboardButton(
                f"{conn['name']} - {conn['profession']}",
                callback_data=f"view_{conn['user_id']}"
            ),
            contact_button
        ]
        keyboard.append(buttons)
    
    await update.message.reply_text(
        "ü§ù *–í–∞—à–∏ —Å–≤—è–∑–∏:*",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )

async def search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['search_skipped'] = []
    await show_next_profile(update, context)

async def show_next_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    skipped = context.user_data.get('search_skipped', [])
    
    conn = sqlite3.connect("colleagues.db")
    c = conn.cursor()
    query = """
        SELECT u.user_id, u.name, u.profession, u.skills, u.bio, u.photo_id, u.is_premium 
        FROM users u
        WHERE u.user_id != ?
        AND NOT EXISTS (
            SELECT 1 FROM connections c
            WHERE (c.from_user = ? AND c.to_user = u.user_id)
            OR (c.to_user = ? AND c.from_user = u.user_id)
        )
        AND u.user_id NOT IN ({})
        ORDER BY RANDOM()
        LIMIT 1
    """.format(','.join(['?']*len(skipped))) if skipped else """
        SELECT u.user_id, u.name, u.profession, u.skills, u.bio, u.photo_id, u.is_premium 
        FROM users u
        WHERE u.user_id != ?
        AND NOT EXISTS (
            SELECT 1 FROM connections c
            WHERE (c.from_user = ? AND c.to_user = u.user_id)
            OR (c.to_user = ? AND c.from_user = u.user_id)
        )
        ORDER BY RANDOM()
        LIMIT 1
    """
    
    params = (user_id, user_id, user_id) + tuple(skipped) if skipped else (user_id, user_id, user_id)
    
    c.execute(query, params)
    row = c.fetchone()
    conn.close()
    
    if not row:
        await context.bot.send_message(
            chat_id=user_id,
            text="üåü –ë–æ–ª—å—à–µ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –ø–æ–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!"
        )
        return
    
    profile_user = {
        'user_id': row[0],
        'name': row[1],
        'profession': row[2],
        'skills': row[3],
        'bio': row[4],
        'photo_id': row[5],
        'is_premium': row[6]
    }
    
    premium_badge = " üíé" if profile_user['is_premium'] else ""
    profile_text = (
        f"üë§ *–ò–º—è:* {profile_user['name']}{premium_badge}\n\n"
        f"üíº *–ü—Ä–æ—Ñ–µ—Å—Å–∏—è:* {profile_user['profession']}\n\n"
        f"üõ†Ô∏è *–ù–∞–≤—ã–∫–∏:* {profile_user['skills']}\n\n"
        f"üìñ *–û —Å–µ–±–µ:* {profile_user['bio']}"
    )
    
    keyboard = [
        [
            InlineKeyboardButton("ü§ù –°–≤—è–∑–∞—Ç—å—Å—è", callback_data=f"connect_{profile_user['user_id']}"),
            InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip_{profile_user['user_id']}")
        ]
    ]
    
    try:
        if profile_user['photo_id']:
            await context.bot.send_photo(
                chat_id=user_id,
                photo=profile_user['photo_id'],
                caption=profile_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await context.bot.send_message(
                chat_id=user_id,
                text=profile_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.MARKDOWN
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await context.bot.send_message(user_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    
    if query.data == "premium_purchase":
        await send_invoice(update, context)
    elif query.data == "cancel_premium":
        await query.edit_message_text("‚ùå –û—Ç–º–µ–Ω–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏.")
    elif query.data == "update_profile":
        await profile(update, context)
    elif query.data.startswith("connect_"):
        if not await check_connection_limit(user_id, context):
            return
        
        target_id = int(query.data.split("_")[1])
        
        conn = sqlite3.connect("colleagues.db")
        c = conn.cursor()
        c.execute(
            "INSERT INTO connections (from_user, to_user, status) VALUES (?, ?, 'pending')",
            (user_id, target_id),
        )
        conn.commit()
        conn.close()
        
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{user_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_{user_id}"),
            ]
        ]
        try:
            await context.bot.send_message(
                chat_id=target_id,
                text=f"üì© –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–≤—è–∑—å –æ—Ç {query.from_user.full_name}!",
                reply_markup=InlineKeyboardMarkup(keyboard),
            )
            await query.edit_message_text("üì© –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.")
        
        await show_next_profile(update, context)
    
    elif query.data.startswith("skip_"):
        skipped_id = int(query.data.split("_")[1])
        context.user_data.setdefault('search_skipped', []).append(skipped_id)
        await query.message.delete()
        await show_next_profile(update, context)
    
    elif query.data.startswith("accept_"):
        from_id = int(query.data.split("_")[1])
        to_id = user_id
        
        conn = sqlite3.connect("colleagues.db")
        c = conn.cursor()
        c.execute(
            "UPDATE connections SET status='accepted' WHERE from_user=? AND to_user=?",
            (from_id, to_id),
        )
        conn.commit()
        conn.close()
        
        await query.edit_message_text("‚úÖ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!")
        try:
            await context.bot.send_message(
                from_id, 
                f"üéâ {query.from_user.full_name} –ø—Ä–∏–Ω—è–ª(–∞) –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–≤—è–∑—å!"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    elif query.data.startswith("decline_"):
        from_id = int(query.data.split("_")[1])
        to_id = user_id
        
        conn = sqlite3.connect("colleagues.db")
        c = conn.cursor()
        c.execute(
            "DELETE FROM connections WHERE from_user=? AND to_user=?", (from_id, to_id)
        )
        conn.commit()
        conn.close()
        
        await query.edit_message_text("‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω.")
        try:
            await context.bot.send_message(
                from_id, 
                f"üòû {query.from_user.full_name} –æ—Ç–∫–ª–æ–Ω–∏–ª(–∞) –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–≤—è–∑—å."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

async def check_connection_limit(user_id, context):
    now = datetime.datetime.now()
    if 'last_connection_date' not in context.user_data or \
       context.user_data['last_connection_date'].date() != now.date():
        context.user_data['connection_count'] = 0
        context.user_data['last_connection_date'] = now
    
    is_premium = get_user_subscription(user_id)
    max_connections = 200 if is_premium else 3
    
    if context.user_data.get('connection_count', 0) >= max_connections:
        msg = (f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π ({max_connections}).\n"
               "üíé –ü—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç.")
        if not is_premium:
            msg += "\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /premium –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"
        await context.bot.send_message(user_id, msg)
        return False
    
    context.user_data['connection_count'] += 1
    return True

async def premium(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if get_user_subscription(update.effective_user.id):
        await update.message.reply_text("‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞!")
        return
    
    text = (
        "üíé *–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞*\n\n"
        "üöÄ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "‚úîÔ∏è –î–æ 200 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ –¥–µ–Ω—å\n"
        "‚úîÔ∏è –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –ø–æ–∏—Å–∫–µ\n"
        "‚úîÔ∏è –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª—è—Ç—å —Ä–∞–±–æ—Ç—ã\n"
        "‚úîÔ∏è –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∑–Ω–∞—á–æ–∫ –≤ –ø—Ä–æ—Ñ–∏–ª–µ\n"
        "‚úîÔ∏è –ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ\n\n"
        "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: *799‚ÇΩ/–º–µ—Å—è—Ü*\n\n"
        "üëá –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:"
    )
    keyboard = [
        [InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º", callback_data="premium_purchase")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_premium")]
    ]
    await update.message.reply_text(
        text, 
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )

async def send_invoice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        if get_user_subscription(user.id):
            await context.bot.send_message(user.id, "‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!")
            return
            
        await context.bot.send_invoice(
            chat_id=user.id,
            title="–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞",
            description="–ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø –Ω–∞ 1 –º–µ—Å—è—Ü",
            payload="premium_subscription",
            provider_token=PAYMASTER_TOKEN,
            currency=CURRENCY,
            prices=[LabeledPrice("–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞", PRICE)],
            need_email=True
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
        await context.bot.send_message(
            chat_id=user.id,
            text="‚ùå –û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def precheckout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    user_id = query.from_user.id
    
    try:
        if get_user_subscription(user_id):
            await query.answer(ok=False, error_message="–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!")
            return
            
        if query.invoice_payload != "premium_subscription":
            await query.answer(ok=False, error_message="–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞")
            return
            
        await query.answer(ok=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã: {e}")
        await query.answer(ok=False, error_message="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞")

async def successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    try:
        update_premium_status(user_id, True)
        await update.message.reply_text(
            "üéâ *–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!*\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã:\n"
            "- –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π\n"
            "- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –ø–æ–∏—Å–∫–µ\n"
            "- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª—è—Ç—å —Ä–∞–±–æ—Ç—ã\n"
            "- –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∑–Ω–∞—á–æ–∫ –≤ –ø—Ä–æ—Ñ–∏–ª–µ\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!",
            parse_mode=ParseMode.MARKDOWN
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

async def payment_error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ùå *–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã*\n\n"
        "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
        "- –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–∞—Ä—Ç–µ\n"
        "- –ö–∞—Ä—Ç–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–Ω–ª–∞–π–Ω-–ø–ª–∞—Ç–µ–∂–∏\n"
        "- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞\n\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
        parse_mode=ParseMode.MARKDOWN
    )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    context.user_data.clear()
    return ConversationHandler.END

def main() -> None:
    create_tables()
    application = Application.builder().token("***").build()
    job_queue = application.job_queue

    job_queue.run_daily(check_subscriptions, time=datetime.time(hour=0, minute=0, second=0))

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("profile", profile),
            CallbackQueryHandler(profile, pattern="update_profile")
        ],
        states={
            EDITING: [CallbackQueryHandler(edit_field)],
            EDIT_PHOTO: [
                MessageHandler(filters.PHOTO, handle_photo),
                CommandHandler("skip", skip_photo)
            ],
            EDIT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_name)],
            EDIT_PROFESSION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_profession)],
            EDIT_SKILLS: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_skills)],
            EDIT_BIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_bio)],
            EDIT_SOCIAL: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_social),
                CommandHandler("skip", skip_social)
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Regex(r'^üÜò –ü–æ–º–æ—â—å$'), help_command))
    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(filters.Regex(r'^üîç –ü–æ–∏—Å–∫ —Å–≤—è–∑–µ–π$'), search))
    application.add_handler(MessageHandler(filters.Regex(r'^üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å$'), myprofile))
    application.add_handler(MessageHandler(filters.Regex(r'^ü§ù –ú–æ–∏ —Å–≤—è–∑–∏$'), connections))
    application.add_handler(MessageHandler(filters.Regex(r'^üíé –ü—Ä–µ–º–∏—É–º$'), premium))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(PreCheckoutQueryHandler(precheckout))
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment))
    application.add_handler(MessageHandler(filters.TEXT, payment_error))

    application.run_polling()

if __name__ == "__main__":
    main()
